# Azure Pipeline for dockerized React Single-Page application projects.
#
# Defines 2 stages:
# 1. Building: builds the docker image nad pushes it to
#   Container Registry using a environment by current branch.
# 2. Deployment: deploys the image to webapp for containers.
#
# Branches environments are defined below:
# main -> production
# stage -> staging
# release/* -> qa
# develop -> development
# hotfix/* -> development
# feature/* -> none

trigger:
  batch: true
  branches:
    include:
      - master
      - stage
      - release/*
      - develop
      - hotfix/*
      #- feature/*

variables:
  vmImageName: ubuntu-latest
  System.Debug: false
  buildId: # appends only on dev build
  version: 0.0.0 # project version from package.json
  project: default # project name from package.json
  containerRegistryServiceConnection: ACR-ACHS # service connection name
  containerRegistryServer: achs # repository

  # production environment variables definition.
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    environmentName: PROD
    environment: DEPLOY_WEB_PROD
    azureSubscription: asc-prod-project
    webapp: wa-prod-project
    environmentBuild: production

  # staging environment variables definition.
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/stage') }}:
    environmentName: STAGING
    environment: DEPLOY_WEB_STAGING
    azureSubscription: asc-stg-project
    webapp: wa-stg-project
    environmentBuild: staging

  # qa environment variables definition.
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') }}:
    environmentName: QA
    environment: DEPLOY_WEB_QA
    azureSubscription: asc-qa-project
    webapp: wa-qa-project
    environmentBuild: qa

  # development environment variables definition.
  ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')) }}:
    environmentName: DESA
    environment: DEPLOY_WEB_DESA
    azureSubscription: asc-desa-project
    webapp: wa-desa-project
    environmentBuild: development
    # only dev appends buildId to resource tag.
    buildId: .$(Build.BuildId)

pool:
    vmImage: $(vmImageName)

stages:
  # IMAGE BUILDING AND PUSH
  - stage: Build
    displayName: Build & Push ${{ variables.environmentName }}
    jobs:
    - job: Build
      steps:

      - script: |
          ver=$(node -p "require('./package.json').version")
          name=$(node -p "require('./package.json').name")

          echo "##vso[task.setvariable variable=version]$ver"
          echo "##vso[task.setvariable variable=project]$name"

          echo "##vso[task.setvariable variable=version;isOutput=true]$ver"
          echo "##vso[task.setvariable variable=project;isOutput=true]$name"
        name: projectInfo
        displayName: 'Retrieving package.json info'

      - script: |
          echo "Docker resource: $(containerRegistryServer)/$(project):$(version)$(buildId)-$(environmentBuild)"
        displayName: Printing resource path

      - task: Docker@2
        inputs:
          command: build
          Dockerfile: ./Dockerfile
          containerRegistry: $(containerRegistryServiceConnection)
          repository: $(containerRegistryServer)/$(project)
          tags: $(version)$(buildId)-$(environmentBuild)
          arguments: --build-arg ENV=$(environmentBuild)
        displayName: Building image for $(environmentBuild)

      - task: Docker@2
        inputs:
          command: push
          containerRegistry: $(containerRegistryServiceConnection)
          repository: $(containerRegistryServer)/$(project)
          tags: $(version)$(buildId)-$(environmentBuild)
        displayName: Pushing image
        #condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  # IMAGE DEPLOYMENT
  - stage: Deploy
    displayName: 'Deployment ${{ variables.environmentName }}'
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: $(environment)
      variables:
        project: $[ stageDependencies.Build.Build.outputs['projectInfo.project'] ]
        version: $[ stageDependencies.Build.Build.outputs['projectInfo.version'] ]
      strategy:
        runOnce:
          deploy:
            steps:

            - task: AzureWebAppContainer@1
              inputs:
                azureSubscription: $(azureSubscription)
                appName: $(webapp)
                imageName: $(containerRegistryServer)/$(project):$(version)$(buildId)-$(environmentBuild)
              displayName: Deploying image to $(webapp)
