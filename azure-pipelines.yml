# Azure Pipeline for React Single-Page application projects.
#
# Defines 2 stages:
# 1. Building: builds the project using a environment by current branch.
# 2. Deployment: deploys the artifact to webapp.
#
# Branches environments are defined below:
# master -> production
# release/* -> qa
# develop -> development
# hotfix/* -> development
# feature/* -> none

trigger:
  batch: true
  branches:
    include:
      - master
      - release/*
      - develop
      - hotfix
      #- feature/*

variables:
  # - group: react-redux-cd-variables

  # branch: -${{ variables['Build.SourceBranch'] }}
  # branchName: -${{ variables['Build.SourceBranchName'] }}
  vmImageName: 'ubuntu-latest'
  System.Debug: false

  # production environment variables definition.
  ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
    environmentName: 'PROD'
    environment: 'DEPLOY_WEB_PROD'
    azureSubscription: 'ASC-Project-PROD'
    webapp: 'wa-prod-project'
    environmentBuild: production
  # qa environment variables definition.
  ${{ if startsWith(variables['Build.SourceBranch'], 'refs/heads/release/') }}:
    environmentName: 'QA'
    environment: 'DEPLOY_WEB_QA'
    azureSubscription: 'ASC-Project-QA'
    webapp: 'wa-qa-project'
    environmentBuild: qa
  # development environment variables definition.
  ${{ if or(eq(variables['Build.SourceBranch'], 'refs/heads/develop'), startsWith(variables['Build.SourceBranch'], 'refs/heads/hotfix/')) }}:
    environmentName: 'DESA'
    environment: 'DEPLOY_WEB_DESA'
    azureSubscription: 'ASC-Project-DESA'
    webapp: 'wa-desa-project'
    environmentBuild: development

pool:
    vmImage: $(vmImageName)

stages:

  # BUILDING STAGE
  - stage: Build
    displayName: 'Building ${{ variables.environmentName }}'
    jobs:
    - job: Build

      steps:

      - task: NodeTool@0
        inputs:
          versionSpec: '12.x'
        displayName: 'Installing Node.js 12.x'

      - task: Npm@1
        inputs:
          command: 'install'
        displayName: 'Downloading dependencies'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run test:$(environmentBuild)'
        displayName: 'Executing tests'

      - task: Npm@1
        inputs:
          command: 'custom'
          customCommand: 'run build:$(environmentBuild)'
        displayName: 'Building project'

      # - task: Npm@1
      #   condition: ne(variables.environmentName, 'DESA')
      #   inputs:
      #     command: 'custom'
      #     customCommand: 'run postbuild'
      #   displayName: 'Cleaning sourcemaps'

      - task: CopyFiles@2
        inputs:
          sourceFolder: 'build'
          contents: '**/*'
          targetFolder: '$(Build.ArtifactStagingDirectory)'
          cleanTargetFolder: true
        displayName: 'Preparing files'

      - task: CopyFiles@2
        inputs:
          SourceFolder: '$(Build.Repository.LocalPath)'
          Contents: 'web.config'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
          OverWrite: true
        displayName: 'Setting up Web.config'

      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: $(Build.ArtifactStagingDirectory)
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
          includeRootFolder: false
        displayName: 'Packaging files'

      - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        artifact: artifact
        displayName: 'Uploading files to pipeline'

  # DEPLOYMENT STAGE
  - stage: Deploy
    displayName: 'Deployment ${{ variables.environmentName }}'
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: $(environment)
      strategy:
        runOnce:
          deploy:

            steps:

            - download: current
              artifact: artifact
              displayName: 'Downloading artifact'

            - task: AzureRmWebAppDeployment@4
              inputs:
                ConnectionType: 'AzureRM'
                azureSubscription: $(azureSubscription)
                appType: 'webApp'
                WebAppName: $(webapp)
                packageForLinux: '$(Pipeline.Workspace)/artifact/$(Build.BuildId).zip'
              displayName: 'Deploying artifact to ${{ variables.webapp }}'
